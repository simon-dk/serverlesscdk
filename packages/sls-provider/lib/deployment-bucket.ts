import { Construct, BaseResource } from "../../core";

export interface IDeploymentBucket {
  blockPublicAccess?: boolean; //true # Prevents public access via ACLs or bucket policies. Default is false
  skipPolicySetup?: boolean; //false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
  name?: string; //com.serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework
  maxPreviousDeploymentArtifacts?: string; //10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
  serverSideEncryption?: "AES256"; //AES256 # server-side encryption method
  sseKMSKeyId?: string; //arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa # when using server-side encryption
  sseCustomerAlgorithim?: string; //AES256 # when using server-side encryption and custom keys
  sseCustomerKey?: string; //string # when using server-side encryption and custom keys
  sseCustomerKeyMD5?: string; //md5sum # when using server-side encryption and custom keys
  tags?: { [k: string]: string };
}

export interface DeploymentBucketProps {
  blockPublicAccess?: boolean;
  skipPolicySetup?: boolean;
  name?: string;
  maxPreviousDeploymentArtifacts?: string;
  serverSideEncryption?: "AES256";
  sseKMSKeyId?: string;
  sseCustomerAlgorithim?: string;
  sseCustomerKey?: string;
  sseCustomerKeyMD5?: string;
  tags?: { [k: string]: string };
}

export class DeploymentBucket extends BaseResource implements IDeploymentBucket {
  public readonly blockPublicAccess?: boolean;
  public readonly skipPolicySetup?: boolean;
  public readonly name?: string;
  public readonly maxPreviousDeploymentArtifacts?: string;
  public readonly serverSideEncryption?: "AES256";
  public readonly sseKMSKeyId?: string;
  public readonly sseCustomerAlgorithim?: string;
  public readonly sseCustomerKey?: string;
  public readonly sseCustomerKeyMD5?: string;
  public readonly tags?: { [k: string]: string };

  constructor(scope: Construct, props: DeploymentBucketProps) {
    super(scope, "custom.provider.deploymentBucket");

    this.blockPublicAccess = props.blockPublicAccess;
    this.skipPolicySetup = props.skipPolicySetup;
    this.name = props.name;
    this.maxPreviousDeploymentArtifacts = props.maxPreviousDeploymentArtifacts;
    this.serverSideEncryption = props.serverSideEncryption;
    this.sseKMSKeyId = props.sseKMSKeyId;
    this.sseCustomerAlgorithim = props.sseCustomerAlgorithim;
    this.sseCustomerKey = props.sseCustomerKey;
    this.sseCustomerKeyMD5 = props.sseCustomerKeyMD5;
    this.tags = props.tags;
  }
  synth() {
    return { provider: { deploymentBucket: this.synthResource() } };
  }
}
